/**
    Copyright 2017 Andrea "Stock" Stocchero

    Licensed under the Apache License, Version 2.0 (the "License";
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
package org.pepstock.coderba.client.entities;

import org.pepstock.coderba.client.EditorArea;
import org.pepstock.coderba.client.commons.CallbackProxy;
import org.pepstock.coderba.client.commons.Id;
import org.pepstock.coderba.client.commons.JsHelper;
import org.pepstock.coderba.client.commons.Key;
import org.pepstock.coderba.client.commons.UndefinedValues;
import org.pepstock.coderba.client.events.AddHandlerEvent;
import org.pepstock.coderba.client.events.EventManager;
import org.pepstock.coderba.client.events.IsEventManager;
import org.pepstock.coderba.client.events.LineWidgetRedrawEvent;
import org.pepstock.coderba.client.events.RemoveHandlerEvent;

import com.google.gwt.dom.client.Element;
import com.google.gwt.event.shared.EventHandler;
import com.google.gwt.event.shared.GwtEvent.Type;
import com.google.gwt.event.shared.HandlerRegistration;

import jsinterop.annotations.JsFunction;

/**
 * Entity which maps an element shown below a line, spanning the whole of the editor's width, and moving the lines below it
 * downwards.
 * 
 * @author Andrea "Stock" Stocchero
 *
 */
public final class LineWidget extends LineWidgetOptions implements IsEventManager {

	// ---------------------------
	// -- JAVASCRIPT FUNCTIONS ---
	// ---------------------------

	/**
	 * Java script FUNCTION that is called whenever the editor re-adds the widget to the DOM.<br>
	 * This will happen once right after the widget is added (if it is scrolled into view), and then again whenever it is
	 * scrolled out of view and back in again, or when changes to the editor options or the line the widget is on require the
	 * widget to be redrawn.
	 * 
	 * @author Andrea "Stock" Stocchero
	 */
	@JsFunction
	interface LineWidgetRedrawFunction {

		/**
		 * Is called whenever the editor re-adds the widget to the DOM.<br>
		 * This will happen once right after the widget is added (if it is scrolled into view), and then again whenever it is
		 * scrolled out of view and back in again, or when changes to the editor options or the line the widget is on require
		 * the widget to be redrawn.
		 */
		void call();
	}

	// ---------------------------
	// -- CALLBACKS PROXIES ---
	// ---------------------------
	// callback proxy to invoke the LineHandleDelete function
	private final CallbackProxy<LineWidgetRedrawFunction> lineWidgetRedrawFunctionProxy = JsHelper.get().newCallbackProxy();
	// native line widget object (generated by CodeMirror)
	private final NativeLineWidget nativeObject;
	// the current document related to this line widget
	private final Document document;
	// line handle object related to this line widget
	private final LineHandle handle;
	// event manager instance
	private final EventManager eventManager;
	// default element (null)
	private static final Element DEFAULT_NODE = null;

	/**
	 * Name of properties of native object.
	 */
	private enum Property implements Key
	{
		NODE("node"),
		HEIGHT("height");

		// name value of property
		private final String value;

		/**
		 * Creates with the property value to use into native object.
		 * 
		 * @param value value of property name
		 */
		private Property(String value) {
			this.value = value;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.pepstock.coderba.client.commons.Key#value()
		 */
		@Override
		public String value() {
			return value;
		}
	}

	/**
	 * Creates a line widget instance wrapping a native code mirror object and the document which this line widget belongs to.
	 * 
	 * @param nativeObject a native code mirror object
	 * @param document document which this line widget belongs to
	 */
	LineWidget(NativeLineWidget nativeObject, Document document) {
		super(nativeObject);
		this.nativeObject = nativeObject;
		this.document = document;
		// stores the id based on a counter
		Id.applyTo(nativeObject);
		// sets event manager
		this.eventManager = new EventManager(this);
		// gets line handle from native object
		NativeLineHandle nativeHandle = nativeObject.getLine();
		// checks if line handle is consistent
		if (nativeHandle != null) {
			// gets the line handle by document cache
			this.handle = document.getLineHandleById(Id.retrieveFrom(nativeHandle));
		} else {
			// otherwise it sets to null
			// FIXME if correct
			this.handle = null;
		}
		// -------------------------------
		// -- SET CALLBACKS to PROXIES ---
		// -------------------------------
		lineWidgetRedrawFunctionProxy.setCallback(() -> onRedraw());
	}

	/**
	 * Returns the line widget unique ID.
	 * 
	 * @return the line widget unique ID
	 */
	public String getId() {
		return Id.retrieveFrom(nativeObject);
	}

	/**
	 * Gets the height of the widget.
	 * 
	 * @return the height of the widget.
	 */
	public int getHeight() {
		return getValue(Property.HEIGHT, UndefinedValues.INTEGER);
	}

	/**
	 * Returns the DOM element which represents the widget.
	 * 
	 * @return the DOM element which represents the widget
	 */
	public Element getNode() {
		return getValue(Property.NODE, DEFAULT_NODE);
	}

	/**
	 * Returns the line handle related to the line or <code>null</code> if not created previously.
	 * 
	 * @return the line handle related to the line or <code>null</code> if not created previously
	 */
	public LineHandle getLineHandle() {
		return handle;
	}

	/**
	 * Removes the widget.
	 */
	public void clear() {
		document.clearLineWidget(getId());
		nativeObject.clear();
	}

	/**
	 * Call this if you made some change to the widget's DOM node that might affect its height.<br>
	 * It'll force CodeMirror to update the height of the line that contains the widget.
	 */
	public void changed() {
		nativeObject.changed();
	}

	// ---------------------------------
	// --- EVENTS METHODS
	// ---------------------------------

	/**
	 * Fired whenever the editor re-adds the widget to the DOM.<br>
	 * This will happen once right after the widget is added (if it is scrolled into view), and then again whenever it is
	 * scrolled out of view and back in again, or when changes to the editor options or the line the widget is on require the
	 * widget to be redrawn.
	 */
	private void onRedraw() {
		// gets editor area
		EditorArea area = document.getEditorArea();
		// checks if area is consistent
		if (area != null) {
			// fires event using this line widget as subject of event
			eventManager.fireEvent(new LineWidgetRedrawEvent(area, document, this));
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pepstock.coderba.client.events.AddHandlerEventHandler#onAdd(org.pepstock.coderba.client.events.AddHandlerEvent)
	 */
	@Override
	public void onAdd(AddHandlerEvent event) {
		if (event.isRecognize(LineWidgetRedrawEvent.TYPE) && eventManager.getHandlerCount(LineWidgetRedrawEvent.TYPE) == 1) {
			// checks if type of added event handler is LineWidgetRedrawEvent
			// if there is not any LineWidgetRedrawEvent handler
			// sets the callback proxy in order to call the user event interface
			nativeObject.on(LineWidgetRedrawEvent.NAME, lineWidgetRedrawFunctionProxy.getProxy());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pepstock.coderba.client.events.RemoveHandlerEventHandler#onRemove(org.pepstock.coderba.client.events.
	 * RemoveHandlerEvent)
	 */
	@Override
	public void onRemove(RemoveHandlerEvent event) {
		if (event.isRecognize(LineWidgetRedrawEvent.TYPE) && eventManager.getHandlerCount(LineWidgetRedrawEvent.TYPE) == 0) {
			// checks if type of removed event handler is LineWidgetRedrawEvent
			// if there is not any LineWidgetRedrawEvent handler
			// sets the callback proxy in order to call the user event interface
			nativeObject.off(LineWidgetRedrawEvent.NAME, lineWidgetRedrawFunctionProxy.getProxy());
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pepstock.coderba.client.events.IsEventManager#addHandler(com.google.gwt.event.shared.GwtEvent.Type,
	 * com.google.gwt.event.shared.EventHandler)
	 */
	@Override
	public <H extends EventHandler> HandlerRegistration addHandler(Type<H> type, H handler) {
		return eventManager.addHandler(type, handler);
	}

}
